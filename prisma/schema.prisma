// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  sessions         Session[]
  accounts         Account[]
  members          Member[]
  invitations      Invitation[]
  twofactors       TwoFactor[]
  passkeys         Passkey[]
  Subscription     Subscription[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?
  accountId            String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id           String         @id
  name         String
  slug         String?
  logo         String?
  createdAt    DateTime
  metadata     String?
  members      Member[]
  invitations  Invitation[]
  Subscription Subscription[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Passkey {
  id             String    @id
  name           String?
  publicKey      String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  webauthnUserID String
  counter        Int
  deviceType     String
  backedUp       Boolean
  transports     String?
  createdAt      DateTime?

  @@map("passkey")
}

model Subscription {
  id                 String        @id
  createdAt          DateTime
  modifiedAt         DateTime
  userId             String?
  user               User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  amount             Int
  currency           String
  recurringInterval  String
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean
  startedAt          DateTime
  endedAt            DateTime?
  productId          String?
  product            Product?      @relation(fields: [productId], references: [id])
  priceId            String?
  discountId         String?
  checkoutId         String?
  metadata           Json?
  customFieldData    Json?

  @@map("subscription")
}

// The Product references Polar's organization via polarOrganizationId.
// It does not necessarily map to your internal Organization model.
model Product {
  id                   String         @id
  createdAt            DateTime
  modifiedAt           DateTime
  name                 String
  description          String
  isRecurring          Boolean
  isArchived           Boolean
  polarOrganizationId  String // ID from Polar's data
  metadata             Json?
  prices               Price[]
  benefits             Benefit[]
  attachedCustomFields Json?
  Subscription         Subscription[]

  @@map("product")
}

model Price {
  id                String   @id
  createdAt         DateTime
  modifiedAt        DateTime
  amountType        String
  isArchived        Boolean
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  priceCurrency     String
  priceAmount       Int
  type              String
  recurringInterval String?

  @@map("price")
}

// Benefit also references Polar's organization, stored as polarOrganizationId,
// not related to your internal Organization model.
model Benefit {
  id                  String   @id
  createdAt           DateTime
  modifiedAt          DateTime
  type                String
  description         String
  selectable          Boolean
  deletable           Boolean
  polarOrganizationId String
  productId           String
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  properties          Json?

  @@map("benefit")
}
